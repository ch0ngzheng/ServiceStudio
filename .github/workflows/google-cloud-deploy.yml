# .github/workflows/google-cloud-deploy.yml

name: Deploy to Google Cloud

on:
  push:
    branches:
      - main

env:
  # TODO: Replace with your Google Cloud project ID
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  # TODO: Replace with your Artifact Registry location
  GAR_LOCATION: us-central1 
  # TODO: Replace with your frontend Google Cloud Storage bucket name
  FRONTEND_BUCKET: servicedesignstudio 
  # TODO: Replace with your Cloud Load Balancer name for CDN cache invalidation
  LOAD_BALANCER_NAME: dbs-studio-lb

jobs:
  setup-build-deploy:
    name: Setup, Build, and Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Authenticate to Google Cloud
      # See: https://github.com/google-github-actions/auth
      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          # You need to create a service account with roles/artifactregistry.writer, roles/run.admin, and roles/storage.objectAdmin
          # and add the JSON key as a secret named GCP_SA_KEY in your GitHub repository settings
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      # --- DEPLOY BUDGET SERVICE ---
      - name: Build and Push Docker Image for budget_service
        uses: docker/build-push-action@v5
        with:
          context: ./budget_service
          push: true
          tags: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/service-design-studio-repo/budget-service:${{ github.sha }}

      - name: Deploy budget_service to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: 'budget-service'
          region: ${{ env.GAR_LOCATION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/service-design-studio-repo/budget-service:${{ github.sha }}
          secrets: MONGO_URI=MONGO_URI:latest
          flags: --allow-unauthenticated --remove-env-vars=MONGO_URI

      # --- DEPLOY BACKEND SERVICE ---
      - name: Build and Push Docker Image for backend_service
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/service-design-studio-repo/backend-service:${{ github.sha }}

      - name: Deploy backend_service to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: 'backend-service'
          region: ${{ env.GAR_LOCATION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/service-design-studio-repo/backend-service:${{ github.sha }}
          secrets: MONGODB_CONNECTIONSTR=MONGODB_CONNECTIONSTR:latest
          flags: --allow-unauthenticated --remove-env-vars=MONGODB_CONNECTIONSTR

      # --- DEPLOY PREDICTION SERVICE ---
      - name: Build and Push Docker Image for prediction_service
        uses: docker/build-push-action@v5
        with:
          context: ./prediction_service
          push: true
          tags: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/service-design-studio-repo/prediction-service:${{ github.sha }}

      - name: Deploy prediction_service to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: 'prediction-service'
          region: ${{ env.GAR_LOCATION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/service-design-studio-repo/prediction-service:${{ github.sha }}
          flags: --allow-unauthenticated

      # --- DEPLOY FRONTEND ---
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install and Build Frontend
        run: |
          cd frontend
          npm install
          npm run build

      - name: Deploy Frontend to Google Cloud Storage
        uses: google-github-actions/upload-cloud-storage@v2
        with:
          path: frontend/dist
          destination: ${{ env.FRONTEND_BUCKET }}
          parent: false # Upload contents of dist directly to bucket root

      - name: Invalidate Cloud CDN Cache
        run: |
          gcloud compute url-maps invalidate-cdn-cache ${{ env.LOAD_BALANCER_NAME }} --path "/*" --project ${{ env.GCP_PROJECT_ID }}
